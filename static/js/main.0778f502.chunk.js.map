{"version":3,"sources":["registerServiceWorker.js","components/title/title.jsx","components/news/news.jsx","components/input/input.jsx","components/select/select.jsx","components/pagination/pagination.jsx","containers/news/news.jsx","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Title","_ref","title","react_default","a","createElement","className","defaultProps","NewsPost","author","created_at","num_comments","points","url","href","concat","Date","toLocaleDateString","Input","onChange","value","onKeyPress","placeholder","handleChange","options","id","name","map","_ref2","label","key","htmlFor","Pagination","onClick","page","lastPage","data-name","gapBtns","middleBtn","lastBtns","num","renderPaginationBtns","BASE_PATH","SEARCH_PATH","SEARCH_PARAM","PAGE_HITS","PAGE_PARAM","HITS","News","searchQuery","result","hitsPerPage","fetchData","fetch","res","json","_this","setNews","handleInputChange","target","setState","getSearch","_this$state","handleHitsChange","_ref3","handlePageChange","_ref4","btnType","getAttribute","isNaN","updatePage","number","_this$state2","_this$state3","this","_this$state4","_result$hits","hits","nbPages","components_title_title","components_select_select","pagination_pagination","input_input","_ref5","objectID","news_news","Component","ReactDOM","render","containers_news_news","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0778f502.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          /* eslint-disable no-console */\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit https://goo.gl/SC7cgQ');\n          /* eslint-enable */\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              /* eslint-disable no-console */\n              console.log('New content is available; please refresh.');\n              /* eslint-enable */\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              /* eslint-disable no-console */\n              console.log('Content is cached for offline use.');\n              /* eslint-enable */\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      /* eslint-disable no-console */\n      console.error('Error during service worker registration:', error);\n      /* eslint-enable */\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      /* eslint-disable no-console */\n      console.log('No internet connection found. App is running in offline mode.');\n      /* eslint-enable */\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './title.css';\n\nconst Title = ({ title }) => <h1 className=\"title\">{title}</h1>;\n\nTitle.propTypes = {\n  title: PropTypes.string\n};\n\nTitle.defaultProps = {\n  title: 'Simple title'\n};\n\nexport default Title;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './news.css';\n\nconst NewsPost = ({ author, created_at, num_comments, title, points, url }) => (\n  <li className=\"news\">\n    <div className=\"description\">\n      <a href={url} className=\"newsTitle\">\n        {title}\n      </a>\n      <span className=\"text\">{`${points} points`}</span>\n      <span className=\"comments\">{`${num_comments} comments`}</span>\n      <span className=\"date\">{new Date(created_at).toLocaleDateString()}</span>\n      <span className=\"author\">{author}</span>\n    </div>\n  </li>\n);\n\nNewsPost.propTypes = {\n  author: PropTypes.string,\n  created_at: PropTypes.string.isRequired,\n  num_comments: PropTypes.number,\n  title: PropTypes.string,\n  points: PropTypes.number,\n  url: PropTypes.string\n};\n\nNewsPost.defaultProps = {\n  author: '',\n  num_comments: 0,\n  title: 'Here should be a title',\n  points: 0,\n  url: '#'\n};\n\nexport default NewsPost;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './input.css';\n\nconst Input = ({ onChange, value, onKeyPress }) => (\n  <div className=\"inputWrapper\">\n    <i className=\"fas fa-search\" />\n    <input className=\"input\" placeholder=\"Click to search\" onChange={onChange} onKeyPress={onKeyPress} value={value} />\n  </div>\n);\n\nInput.propTypes = {\n  onChange: PropTypes.func,\n  onKeyPress: PropTypes.func,\n  value: PropTypes.string\n};\n\nInput.defaultProps = {\n  onChange: () => {},\n  onKeyPress: () => {},\n  value: ''\n};\n\nexport default Input;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './select.css';\n\nconst Input = ({ handleChange, options, value }) => (\n  <div className=\"selectWrapper\">\n    <select onChange={handleChange} value={value} id=\"select\" name=\"select\">\n      {options.map(({ value, label }) => (\n        <option key={value} value={value}>\n          {label}\n        </option>\n      ))}\n    </select>\n    <label className=\"selectText\" htmlFor=\"select\">\n      per page\n    </label>\n  </div>\n);\n\nInput.propTypes = {\n  handleChange: PropTypes.func,\n  options: PropTypes.array,\n  value: PropTypes.number\n};\n\nInput.defaultProps = {\n  onChange: () => {},\n  options: [],\n  value: 0\n};\n\nexport default Input;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './pagination.css';\n\nconst renderPaginationBtns = (onClick, page, lastPage) => {\n  const startBtns = [page, page + 1, page + 2];\n  const gapBtns = [page - 2, page - 1, page];\n  const middleBtn = ['...'];\n  const lastBtns = [lastPage - 3, lastPage - 2, lastPage - 1];\n\n  let btnsArr = [];\n\n  if (page < lastPage - 6) {\n    btnsArr = [...startBtns, ...middleBtn, ...lastBtns];\n  } else if (page < lastPage - 4) {\n    btnsArr = [...gapBtns, ...middleBtn, ...lastBtns];\n  } else if (page < lastPage - 3) {\n    btnsArr = [...gapBtns, ...lastBtns]; // last 6 pages\n  } else {\n    btnsArr = [...middleBtn, ...lastBtns]; // last 3 pages\n  }\n\n  return btnsArr.map(num => {\n    return num === '...' ? (\n      num\n    ) : (\n      <button key={num} onClick={onClick} data-name={num} className={num === page ? 'active' : ''}>\n        {num}\n      </button>\n    );\n  });\n};\n\nconst Pagination = ({ onClick, page, lastPage }) => (\n  <div className=\"paginationWrapper\">\n    {page !== 0 && (\n      <button onClick={onClick} data-name=\"prev\">\n        {'<<'}\n      </button>\n    )}\n    {renderPaginationBtns(onClick, page, lastPage)}\n    {page !== lastPage - 1 && (\n      <button onClick={onClick} data-name=\"next\">\n        {'>>'}\n      </button>\n    )}\n  </div>\n);\n\nPagination.propTypes = {\n  onClick: PropTypes.func,\n  page: PropTypes.number,\n  lastPage: PropTypes.number\n};\n\nPagination.defaultProps = {\n  onClick: () => {},\n  page: 0,\n  lastPage: 0\n};\n\nexport default Pagination;\n","import React, { Component } from 'react';\n\nimport Title from '../../components/title/title';\nimport NewsPost from '../../components/news/news';\nimport Input from '../../components/input/input';\nimport Select from '../../components/select/select';\nimport Pagination from '../../components/pagination/pagination';\n\nconst BASE_PATH = 'https://hn.algolia.com/api/v1';\nconst SEARCH_PATH = '/search';\nconst SEARCH_PARAM = 'query=';\nconst PAGE_HITS = 'hitsPerPage=';\nconst PAGE_PARAM = 'page=';\n\nconst HITS = [\n  {\n    value: 10,\n    label: 10\n  },\n  {\n    value: 20,\n    label: 20\n  },\n  {\n    value: 40,\n    label: 40\n  },\n  {\n    value: 50,\n    label: 50\n  }\n];\n\nclass News extends Component {\n  state = {\n    searchQuery: '',\n    result: {},\n    hitsPerPage: 20,\n    page: 0\n  };\n\n  componentDidMount() {\n    const { searchQuery, hitsPerPage, page } = this.state;\n    this.fetchData(searchQuery, hitsPerPage, page);\n  }\n\n  fetchData = (searchQuery, hitsPerPage, page) => {\n    fetch(`${BASE_PATH}${SEARCH_PATH}?${SEARCH_PARAM}${searchQuery}&${PAGE_HITS}${hitsPerPage}&${PAGE_PARAM}${page}`)\n      .then(res => res.json())\n      .then(result => this.setNews(result))\n      .catch(error => error);\n  };\n\n  handleInputChange = ({ target: { value } }) => {\n    this.setState({\n      searchQuery: value\n    });\n  };\n\n  getSearch = ({ key }) => {\n    if (key === 'Enter') {\n      const { searchQuery, hitsPerPage } = this.state;\n      const page = 0;\n      this.setState({\n        page\n      });\n      this.fetchData(searchQuery, hitsPerPage, page);\n    }\n  };\n\n  setNews = result => {\n    this.setState({ result });\n  };\n\n  handleHitsChange = ({ target: { value } }) => {\n    const { searchQuery } = this.state;\n    const page = 0;\n\n    this.setState(\n      {\n        hitsPerPage: +value,\n        page\n      },\n      () => {\n        const { hitsPerPage } = this.state;\n\n        this.fetchData(searchQuery, hitsPerPage, page);\n      }\n    );\n  };\n\n  handlePageChange = ({ target }) => {\n    const btnType = target.getAttribute('data-name');\n    let { page } = this.state;\n\n    if (!isNaN(btnType)) {\n      this.updatePage(+btnType);\n    } else {\n      switch (btnType) {\n        case 'next':\n          this.updatePage(page + 1);\n          break;\n        case 'prev':\n          this.updatePage(page - 1);\n          break;\n        default:\n          return null;\n      }\n    }\n  };\n\n  updatePage = number => {\n    const { searchQuery, hitsPerPage } = this.state;\n    this.setState(\n      {\n        page: number\n      },\n      () => {\n        this.fetchData(searchQuery, hitsPerPage, number);\n      }\n    );\n  };\n\n  render() {\n    const { searchQuery, result, hitsPerPage } = this.state;\n    const { hits = [], page, nbPages } = result;\n\n    return (\n      <div className=\"wrapper\">\n        <Title title=\"Hacker News\" />\n        <Select options={HITS} handleChange={this.handleHitsChange} value={hitsPerPage} />\n        <Pagination onClick={this.handlePageChange} page={page} lastPage={nbPages} />\n        <Input onKeyPress={this.getSearch} onChange={this.handleInputChange} value={searchQuery} />\n        <ul className=\"newsList\">\n          {hits.map(({ author, created_at, num_comments, objectID, title, points, url }) => (\n            <NewsPost key={objectID} author={author} created_at={created_at} num_comments={num_comments} title={title} points={points} url={url} />\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default News;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport registerServiceWorker from './registerServiceWorker';\nimport App from './containers/news/news';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nregisterServiceWorker();\n"],"sourceRoot":""}